<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="hpaste_shelf" label="HPaste">
    <memberTool name="hcopy"/>
    <memberTool name="hpaste"/>
    <memberTool name="hcopyweb"/>
    <memberTool name="hpasteweb"/>
    <memberTool name="hpasteinspect"/>
    <memberTool name="hpasteoptions"/>
    <memberTool name="hpastecollection"/>
    <memberTool name="hpastecollectionauth"/>
  </toolshelf>

  <tool name="hcopy" label="HCopy" icon="hpaste-copy">
    <script scriptType="python"><![CDATA[try:
    from PySide6.QtWidgets import QApplication
except:
    from PySide2.QtWidgets import QApplication

import hpaste

def do():
    try:
        nodes=hou.selectedItems()
    except:
        nodes=hou.selectedNodes()
    if len(nodes) == 0:
        hou.ui.displayMessage("No nodes are selected!",severity=hou.severityType.Error)
        return
    try:
        s=hpaste.nodesToString(nodes)
    except RuntimeError as e:
        hou.ui.displayMessage("Error: %s"%str(e),severity=hou.severityType.Error)
        return
    except RuntimeWarning as e:
        hou.ui.displayMessage("Warning: %s"%str(e),severity=hou.severityType.Warning)
    except Exception as e:
        hou.ui.displayMessage("Internal Error: %s"%str(e),severity=hou.severityType.Error)
        return

    if hou.applicationVersion()[0] > 15:
        hou.ui.copyTextToClipboard(s)
    else:
        qapp = QApplication.instance()
        qapp.clipboard().setText(s)
    
do()]]></script>
  </tool>

  <tool name="hpaste" label="HPaste" icon="hpaste-paste">
    <script scriptType="python"><![CDATA[try:
    from PySide6.QtWidgets import QApplication
except:
    from PySide2.QtWidgets import QApplication

import hpaste
import hpaste.hpasteoptions as opt

def do(pane):
    if hou.applicationVersion()[0] > 15:
        s = hou.ui.getTextFromClipboard()
    else:
        qapp = QApplication.instance()
        s = qapp.clipboard().text()

    geonode = None
    for _ in range(2):
        try:
            hpaste.stringToNodes(s, ne=pane, hou_parent=geonode)
        except hpaste.InvalidContextError as e:
            nec, snc = e.contexts()
            if snc == 'Sop' and nec == 'Object':
                if hou.ui.displayMessage("Error: %s" % str(e), severity=hou.severityType.Warning, buttons=('Create geo node', 'Cancel'), default_choice=0, close_choice=1) == 0:
                    if geonode is not None:
                        raise RuntimeError('are we in an infinite loop?')
                    geonode = e.node().createNode('geo')
                    if pane is not None:
                        geonode.setPosition(pane.cursorPosition())
                    pane = None
                    continue
            else:
                hou.ui.displayMessage("Error: %s"%str(e),severity=hou.severityType.Error)
                return
        except RuntimeError as e:
            hou.ui.displayMessage("Error: %s"%str(e),severity=hou.severityType.Error)
            return
        except RuntimeWarning as e:
            hou.ui.displayMessage("Warning: %s"%str(e),severity=hou.severityType.Warning)
        except Exception as e:
            hou.ui.displayMessage("Internal Error: %s"%str(e),severity=hou.severityType.Error)
            return
        break

do(kwargs['pane'])
]]></script>
  </tool>

  <tool name="hcopyweb" label="HCopyWeb" icon="hpaste-cloud-upload">
    <script scriptType="python"><![CDATA[
from hpaste.hpasteshelffunctions import hcopyweb
hcopyweb()
]]></script>
  </tool>

  <tool name="hpasteweb" label="HPasteWeb" icon="hpaste-cloud-download">
    <script scriptType="python"><![CDATA[
from hpaste.hpasteshelffunctions import hpasteweb
hpasteweb(kwargs['pane'])
]]></script>
  </tool>

  <tool name="hpastecollection" label="Collection" icon="hpaste-collections">
    <script scriptType="python"><![CDATA[try:
    from PySide6.QtGui import QCursor
    from PySide6.QtWidgets import QInputDialog, QApplication
    from PySide6.QtCore import Qt
except ImportError:
    from PySide2.QtGui import QCursor
    from PySide2.QtWidgets import QInputDialog, QApplication
    from PySide2.QtCore import Qt

from hpaste.hpastecollectionwidget import HPasteCollectionWidget
try:
    from hpaste.hpasteshelffunctions import show_waiting_cursor, restore_cursor
except ImportError:
    def show_waiting_cursor():
        qapp = QApplication.instance()
        if isinstance(qapp, QApplication):
            qapp.setOverrideCursor(Qt.WaitCursor)

    def restore_cursor():
        qapp = QApplication.instance()
        if isinstance(qapp, QApplication):
            qapp.restoreOverrideCursor()


def do(kwargs):
    pane=kwargs['pane']
    if(pane is None or not isinstance(pane,hou.NetworkEditor)):
        return

    show_waiting_cursor()
    try:
        mainwindow=hou.qt.mainWindow()
    except:
        mainwindow=hou.ui.mainQtWindow()
    
    try:
        wid=HPasteCollectionWidget(mainwindow)
    finally:
        restore_cursor()
    
    wid.move(QCursor.pos())
    wid.setNetworkEditor(pane)
    wid.show()
    
do(kwargs)]]></script>
  </tool>

  <tool name="hpastecollectionauth" label="Collection Authorization" icon="hpaste-cloud-settings">
    <script scriptType="python"><![CDATA[import hpaste.accountsmanager
from hpaste.accountsmanager import AccountsManager

try:
    mainwindow=hou.qt.mainWindow()
except:
    mainwindow=hou.ui.mainQtWindow()

wid=AccountsManager(mainwindow)

wid.show()]]></script>
  </tool>

  <tool name="hpasteoptions" label="HPaste Options" icon="hpaste-options">
    <script scriptType="python"><![CDATA[from hpaste.optionsdialog import OptionsDialog

try:
    parent=hou.qt.mainWindow()
except:
    parent=hou.ui.mainQtWindow()

w=OptionsDialog(parent)

w.show()]]></script>
  </tool>
  <tool name="hpasteinspect" label="Inspect" icon="hpaste-inspect">
    <script scriptType="python"><![CDATA[from hpaste.hpasteshelffunctions import hpaste_inspect_tool
hpaste_inspect_tool(kwargs)
]]></script>
  </tool>
</shelfDocument>
